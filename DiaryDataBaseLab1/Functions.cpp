# include "Functions.h"


//╡м╡ж╡юк╡гюж╡ъ дюмху----------------------------
void DataInitialization()
{
	//ярбнпч╙лн рхлвюянбхи тюик, б ъйнлс асдсрэ гаеп╡цюрхяэ юйрсюкэмю ╡мтнплюж╡ъ рнарн ярбнпхлн астеп
	ofstream _buf("Buffer.txt");

	if (!_buf)
		cout << "онлхкйю ярбнпеммъ астепмнцн тюикс" << endl;

	_buf.close();
}
//-----------------------------------------------

//ббндхлхн дюмм╡ бпсвмс--------------------------
void DataEntry()
{
	//ббндхлн дюм╡ бпсвмс
	//рхлвюянб╡ гл╡мм╡
	int _ID;
	string _NAME;
	string _PASSWORD;
	string _EMAIL;
	int n;

	cout << "ббед╡рэ й╡кэй╡ярэ дюмху:";
	cin >> n;

	//б╡дйпхбю╙лн астепмхи тюик рю гюохяс╙лн б мэнцн дюм╡
	ofstream record("Buffer.txt", ios::app);

	if (record)
	{
		record << n << endl;
		for (int i = 0; i < n; i++)
		{
			cout << "ббед╡рэ ID --> ";
			cin >> _ID;

			cout << "ббед╡рэ NAME --> ";
			cin >> _NAME;

			cout << "ббед╡рэ PASSWORD -- > ";
			cin >> _PASSWORD;

			cout << "ббед╡рэ EMAIL -- > ";
			cin >> _EMAIL;

			record << _ID << endl;
			record << _NAME << endl;
			record << _PASSWORD << endl;

			if (i < n - 1)
				record << _EMAIL << endl;
			else
				record << _EMAIL;

			cout << "_________________________" << endl;
		}

	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	record.close();
}
//-----------------------------------------------

//гвхрсбюммъ дюмху-------------------------------
void DataReading(string fileName)
{
	//гвхрсбюммъ дюмху ╡г тюикс

	ifstream reading(fileName);
	ofstream record("Buffer.txt", ios::out);

	if (reading)
	{
		if (record)
		{
			//рхлвюянб╡ гл╡мм╡
			int _ID;
			string _NAME;
			string _PASSWORD;
			string _EMAIL;
			int n;

			//гвхрс╙лн дюм╡ ╡г тюикс

			reading >> n;
			record << n << endl;

			for (int i = 0; i < n; i++)
			{
				reading >> _ID;

				reading >> _NAME;

				reading >> _PASSWORD;

				reading >> _EMAIL;

				record << _ID << endl;
				record << _NAME << endl;
				record << _PASSWORD << endl;
				if (i < n - 1)
					record << _EMAIL << endl;
				else
					record << _EMAIL;
			}
			cout << "дюм╡ гвхрюм╡!" << endl;
		}
		else
			cout << "онлхкйю б╡дйпхрръ астепю!" << endl;
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	//гюйпхрръ тюикс
	reading.close();
	record.close();
}
//-----------------------------------------------

//бхбндхлн дюм╡----------------------------------
void Print()
{
	ifstream reading("Buffer.txt");

	if (reading)
	{
		//рхлвюянб╡ гл╡мм╡
		int _ID;
		string _NAME;
		string _PASSWORD;
		string _EMAIL;
		int n;

		reading >> n;
		cout << "й╡кэй╡ярэ дюмху:" << n << endl << endl;

		for (int i = 0; i < n; i++)
		{
			cout << "дюм╡ опн ID" << i + 1 << endl;

			reading >> _ID;
			cout << "ID --> " << _ID << endl;

			reading >> _NAME;
			cout << "NAME --> " << _NAME << endl;

			reading >> _PASSWORD;
			cout << "PASSWORD --> " << _PASSWORD << endl;

			reading >> _EMAIL;
			cout << "EMAIL --> " << _EMAIL << endl;

			cout << "_________________________________" << endl;
		}
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	//гюйпхрръ тюикс
	reading.close();
}
//-----------------------------------------------

//нвхыеммъ дюмху---------------------------------
bool DataCleaning()
{
	//нвхыеммъ астепю

	bool clear = false;

	//б╡дйпхбю╙л тюик
	fstream _buf("Buffer.txt", ios::out);

	if (!_buf)
		cout << "онлхкйю б╡дйпхрръ астепмнцн тюикс" << endl;

	//нвхыс╙лн
	_buf.clear();

	//оепеб╡пйю, ын тюик нвхыемн
	if (_buf.peek() == EOF)
		clear = true;
	else
		clear = false;

	_buf.close();

	return clear;
}
//-----------------------------------------------

//гл╡мч╙лн дюм╡
void DataChange()
{
	//гл╡мч╙лн дюм╡

	//онбрнпме гаепефеммъ дюмху
	//нвхыс╙лн астеп рю онбрнпмн онвхмю╙лн гюохясбюрх дюм╡ б мэнцн
	//оньсй менау╡дмнцн рю гл╡мю инцн

	Copy();

	ifstream reading("Buffer_.txt");
	ofstream record("Buffer.txt", ios::out);

	if (reading)
	{
		if (record)
		{
			//рхлвюянб╡ гл╡мм╡БПЕЛЕММШЕ ОЕПЕЛЕММШЕ
			int _ID;
			string _NAME;
			string _PASSWORD;
			string _EMAIL;
			int n, _n;

			//гвхрс╙лн г астепмнцн тюикю с мнбхи
			reading >> n;
			cout << "наеп╡рэ мнлеп екелемрю, ын асде гл╡мемн (б╡д 1 ДН " << n << "):";
			cin >> _n;
			_n--;

			system("cls");

			record << n << endl;

			record << n << endl;

			if (_n >= 0 && _n < n)
			{
				for (int i = 0; i < n; i++)
				{
					if (i != _n)
					{
						reading >> _ID;
						record << _ID << endl;

						reading >> _NAME;
						record << _NAME << endl;

						reading >> _PASSWORD;
						record << _PASSWORD << endl;

						reading >> _EMAIL;
						if (i < n - 1)
							record << _EMAIL << endl;
						else
							record << _EMAIL;
					}
					else
					{
						cout << "ббед╡рэ ID -->";
						cin >> _ID;

						cout << "ббед╡рэ NAME -->";
						cin >> _NAME;

						cout << "ббед╡рэ PASSWORD -->";
						cin >> _PASSWORD;

						cout << "ббед╡рэ EMAIL -->";
						cin >> _EMAIL;

						record << _ID << endl;
						record << _NAME << endl;
						record << _PASSWORD << endl;
						if (i < n - 1)
							record << _EMAIL << endl;
						else
							record << _EMAIL;

						reading >> _ID;
						reading >> _NAME;
						reading >> _PASSWORD;
						reading >> _EMAIL;
					}
				}
				cout << "дюм╡ гл╡мемн!" << endl;
			}
			else
				cout << "мнлеп ббедемн ме б╡пмн!" << endl;
		}
		else
			cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;
	}
	else
		cout << "онлхкйю б╡дйпхрръ астепмнцн тюикс" << endl;

	record.close();
	reading.close();

	remove("Buffer_.txt");


}
//-----------------------------------------------

//йно╡чбюммъ дюмху------------------------------
void Copy()
{
	//йно╡чбюммъ дн мнбцн тюикс
	ifstream reading("Buffer.txt");
	ofstream record("Buffer_.txt", ios::out);

	if (reading)
	{
		if (record)
		{
			//рхлвюянб╡ гл╡мм╡
			int _ID;
			string _NAME;
			string _PASSWORD;
			string _EMAIL;
			int n;

			//гвхрс╙лн г астепмнцн тюикс рю б мнбхи
			reading >> n;
			record << n << endl;

			for (int i = 0; i < n; i++)
			{
				reading >> _ID;
				record << _ID << endl;

				reading >> _NAME;
				record << _NAME << endl;

				reading >> _PASSWORD;
				record << _PASSWORD << endl;

				reading >> _EMAIL;
				if (i < n - 1)
					record << _EMAIL << endl;
				else
					record << _EMAIL;
			}
		}
		else
			cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;
	}
	else
		cout << "онлхкйю б╡дйпхрръ астепмнцн тюикс!" << endl;

	record.close();
	reading.close();
}
//-----------------------------------------------

//й╡кэй╡ярэ дюмху--------------------------------
int AmountOfData()
{
	//бхбндхрэ й╡кэй╡ярэ дюмху ╡г тюикс
	ifstream _buf("Buffer.txt");
	int n;

	if (_buf)
	{
		_buf >> n;
	}
	else
		cout << "онлхкйю б╡дйпхрръ астепмнцн тюикс!" << endl;

	_buf.close();

	return n;
}
//-----------------------------------------------

//бхдюкеммъ дюмху--------------------------------
void DeleteData()
{
	//бхдюкеммъ дюмху

	//гюоюлърнбс╙лн дюм╡
	//оепегюохяс╙лн с бху╡дмхи астеп
	//нйп╡л бхдюкъ╙лнцн

	Copy();

	ifstream reading("Buffer_.txt");
	ofstream record("Buffer.txt", ios::out);

	if (reading)
	{
		if (record)
		{
			//рхлвюянб╡ гл╡мм╡
			int _ID;
			string _NAME;
			string _PASSWORD;
			string _EMAIL;
			int n, _n;

			//гвхрс╙лн г астепмнцн тюикю с мнбхи
			reading >> n;
			int b = n - 1;
			cout << "наеп╡рэ мнлеп екелемрю, ын гл╡мч╙лн (б╡д 1 дн " << n << "):";
			cin >> _n;
			_n--;

			system("cls");

			record << b << endl;

			if (_n >= 0 && _n < n)
			{
				for (int i = 0; i < n; i++)
				{
					if (i != _n)
					{
						reading >> _ID;
						record << _ID << endl;

						reading >> _NAME;
						record << _NAME << endl;

						reading >> _PASSWORD;
						record << _PASSWORD << endl;

						reading >> _EMAIL;
						if (i < n - 1)
							record << _ID << endl;
						else
							record << _EMAIL;
					}
					else
					{
						reading >> _ID;
						reading >> _NAME;
						reading >> _PASSWORD;
						reading >> _EMAIL;
					}
				}
				cout << "дюм╡ бхдюкем╡!" << endl;
			}
			else
				cout << "мнлеп бедемн ме б╡пмн!" << endl;
		}
		else
			cout << "онлхкйю б╡дйпхрръ тюикс" << endl;
	}
	else
		cout << "онлхкйю б╡дйпхрръ астепмнцн тюикс" << endl;

	record.close();
	reading.close();

	remove("Buffer_.txt");
}
//-----------------------------------------------

//дндюбюммъ дюмху--------------------------------
void AddData()
{
	//дндюрх дюм╡

	//рхлвюянб╡ гл╡мм╡
	int _ID;
	string _NAME;
	string _PASSWORD;
	string _EMAIL;
	int n = AmountOfData() + 1;

	//б╡дйпхбю╙лн астепмхи тюик
	ofstream record("Buffer.txt", ios::app);
	ofstream record_("Buffer.txt", ios::out | ios::in);

	if (record_)
	{
		record_ << n << endl;
	}
	else
		cout << "онлхкйю б╡дйпхрръ астепмнцн тюикс!" << endl;

	if (record)
	{
		record << endl;

		cout << "ббед╡рэ дюмм╡ ID --> ";
		cin >> _ID;

		cout << "ббед╡рэ дюмм╡ NAME --> ";
		cin >> _NAME;

		cout << "ббед╡рэ дюмм╡ PASSWORD --> ";
		cin >> _PASSWORD;

		cout << "ббед╡рэ дюмм╡ EMAIL --> ";
		cin >> _EMAIL;

		record << _ID << endl;
		record << _NAME << endl;
		record << _PASSWORD << endl;
		record << _EMAIL;
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс" << endl;

	record.close();
	record_.close();
}
//-----------------------------------------------

//гаепефеммъ дюмху-------------------------------
void SaveData(string fileName)
{
	//гаепефеммъ дюмху
	ifstream reading("Buffer.txt");
	ofstream record(fileName, ios::out);

	if (reading)
	{
		if (record)
		{
			//рхлвюянб╡ гл╡мм╡
			int _ID;
			string _NAME;
			string _PASSWORD;
			string _EMAIL;
			int n;

			reading >> n;
			record << n << endl;

			for (int i = 0; i < n; i++)
			{
				reading >> _ID;
				record << _ID << endl;

				reading >> _NAME;
				record << _NAME << endl;

				reading >> _PASSWORD;
				record << _PASSWORD << endl;

				reading >> _EMAIL;
				if (i < n - 1)
					record << _EMAIL << endl;
				else
					record << _EMAIL;
			}
			cout << "дюм╡ гаепефеммн с тюик╡! --> " << fileName << endl;
		}
		else
			cout << "онлхкйю б╡дйпхрръ астепмнцн тюикю!" << endl;
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	record.close();
	reading.close();

}
//-----------------------------------------------


///////////////////////////////////////////////////////////////
//////////****SLAVE_FUNCTION*************************//////////
///////////////////////////////////////////////////////////////


//╡м╡ж╡юк╡гюж╡ъ дюмху дкъ о╡донпъдйнбюмху рюакхжэ--
void DataInitializationSlave()
{
	//ярбнпч╙лн рхлвюянбхи тюик, б ъйнлс асдсрэ гаеп╡цюрхяэ юйрсюкэмю ╡мтнплюж╡ъ рнарн ярбнпхлн астеп
	ofstream _bufSlave("BufferSlave.txt");

	if (!_bufSlave)
		cout << "онлхкйю ярбнпеммъ астепмнцн тюикс" << endl;

	_bufSlave.close();
}
//----------------------------------------------

//янпрсбюммъ о╡дгюохя╡б дкъ бхбедеммъ мю ейпюм
void DataSortingMaster()
{
	string index;
	cout << "ббед╡рэ ID дкъ цпсосбюммъ MASTER дюмху гю ╡мдейянл" << endl;
	cin >> index;

	int s;//й╡кэй╡ярэ мюанп╡б дюмху с тюик╡
	int domen = 4;//й╡кэй╡ярэ ярнбаж╡ с рюакхж╡
	setlocale(LC_ALL, "rus");
	ifstream file; // ярбнпч╙лн на╙йр йкюяс ifstream
	file.open("Master.txt"); // б╡дйпхбю╙лн тюик
	ofstream record("Master1.txt", ios::out);
	ofstream rec("Master2.txt", ios::out);
	ofstream write("MasterSort.txt", ios::out);
	file >> s;
	string str;

	int n;
	n = s * 4;

	//б╡дйпхрръ тюикс рю гвхрсбюммъ дюмху (1.txt)
	if (!file)
	{
		cout << "тЮИК МЕ НРЙПШР\n\n";
		//return -1;
	}
	else
	{
		cout << "бЯЕ нй! тЮИК НРЙПШР!\n\n";
	}

	//оепьхи дхмюл╡вмхи люяхб
	int size = n + 1;
	string* st = new string[size];
	for (int i = 0; i < n + 1; i++)
	{
		getline(file, str);
		if (str == "")
		{
			continue;
		}
		st[i] = str;
		//cout << "st -->" << i << "-->" << st[i] << endl;
		record << str << endl;
	}
	file.close();

	//б╡дйпхрръ тюикс рю гвхрсбюммъ дюмху (Buffer.txt)
	ifstream buffer; // ярбнпч╙лн на╙йр йкюяс ifstream
	buffer.open("Master1.txt"); // б╡дйпхбю╙л тюик
	if (!buffer)
	{
		cout << "тЮИК МЕ НРЙПШР\n\n";
	}
	else
	{
		cout << "бЯЕ нй! тЮИК Buffer НРЙПШР!\n\n";
	}

	//дпсцхи дхмюл╡вмхи люяхб
	int siz = n;
	string* stt = new string[siz];
	for (int j = 0; j < siz; j++)
	{
		getline(buffer, str);
		stt[j] = str;
		//cout << "stt -->" << j << "-->" << stt[j] << endl;
		rec << str << endl;

	}
	buffer.close();


	//янпрсбюммъ о╡дгюохя╡б гю ╡мдейянл
	for (int k = 1; k <= s; k++)
	{
		int razmer = 4 * k;

		for (int i = razmer - 4; i < razmer; i++)
		{
			if (stt[razmer - 4] == index)
			{
				//cout << "--> stt111 -->" << i << "-->" << stt[i] << endl;
				write << stt[i] << endl;

			}

		}
	}

	//пюус╙лн й╡кэй╡ярэ пъдй╡б цпсонбюмху дюмху
	//int nLines = AmountOfDataMasterSort((char*)"MasterSort.txt");
	//cout << "--> pcsTableSortMaster -->" << pcsTableSortMaster << endl;
	//cout << "--> count -->"<< nLines/domen << endl;

}

//-----------------------------------------------

//янпрсбюммъ о╡дгюохя╡б дкъ бхбедеммъ мю ейпюм
void DataSortingSlave()
{
	string index;
	cout << "ббед╡рэ ID дкъ цпсосбюммъ SLAVE дюмху гю ╡мдейянл" << endl;
	cin >> index;

	int s;//й╡кэй╡ярэ мюанп╡б дюмху с тюик╡
	int domen = 4;//й╡кэй╡ярэ ярнбаж╡ с рюакхж╡
	setlocale(LC_ALL, "rus");
	ifstream file; // ярбнпч╙лн на╙йр йкюяс ifstream
	file.open("Slave.txt"); // НРЙПШБЮЕЛ ТЮИК
	ofstream record("Slave1.txt", ios::out);
	ofstream rec("Slave2.txt", ios::out);
	ofstream write("SlaveSort.txt", ios::out);
	file >> s;
	string str;

	int n;
	n = s * 5;

	//б╡дйпхрръ тюикс рю гвхрсбюммъ дюмху (1.txt)
	if (!file)
	{
		cout << "тЮИК МЕ НРЙПШР\n\n";
		//return -1;
	}
	else
	{
		cout << "бЯЕ нй! тЮИК НРЙПШР!\n\n";
	}

	//оепьхи дхмюл╡вмхи люяхб
	int size = n + 1;
	string* st = new string[size];
	for (int i = 0; i < n + 1; i++)
	{
		getline(file, str);
		if (str == "")
		{
			continue;
		}
		st[i] = str;
		cout << "st -->" << i << "-->" << st[i] << endl;
		record << str << endl;
	}
	file.close();

	//б╡дйпхрръ тюикс рю гвхрсбюммъ дюмху (Buffer.txt)
	ifstream buffer; // ярбнпч╙лн на╙йр йкюяс ifstream
	buffer.open("Slave1.txt"); // б╡дйпхбю╙л тюик
	if (!buffer)
	{
		cout << "тЮИК МЕ НРЙПШР\n\n";
	}
	else
	{
		cout << "бЯЕ нй! тЮИК Buffer НРЙПШР!\n\n";
	}

	//дпсцхи дхмюл╡вмхи люяхб
	int siz = n;
	string* stt = new string[siz];
	for (int j = 0; j < siz; j++)
	{
		getline(buffer, str);
		stt[j] = str;
		//cout << "stt -->" << j << "-->" << stt[j] << endl;
		rec << str << endl;

	}
	buffer.close();


	//янпрсбюммъ о╡дгюохя╡б гю ╡мдейянл
	for (int k = 1; k <= s; k++)
	{
		int razmer = 5 * k;
		for (int i = razmer - 5; i < razmer; i++)
		{
			if (stt[razmer - 5] == index)
			{
				//cout << "--> stt111 -->" << i << "-->" << stt[i] << endl;
				write << stt[i] << endl;
			}

		}
	}


}
//-----------------------------------------------

//ббндхлхн дюмм╡ дкъ о╡дкецкху гюохя╡б бпсвмс---
void DataEntrySlave()
{
	//ббндхлн дюм╡ бпсвмс
	//рхлвюянб╡ гл╡мм╡
	int _ID;
	string _NAMEBOOK;
	string _AUTHOR;
	string _GENRE;
	string _LANGUAGE;
	int n;

	cout << "ббед╡рэ й╡кэй╡ярэ дюмху:";
	cin >> n;

	//б╡дйпхбю╙лн астепмхи тюик рю гюохяс╙лн б мэнцн дюм╡
	ofstream recordSlave("BufferSlave.txt", ios::app);
	if (recordSlave)
	{
		recordSlave << n << endl;
		for (int i = 0; i < n; i++)
		{
			cout << "ббед╡рэ ID --> ";
			cin >> _ID;

			cout << "ббед╡рэ NAMEBOOK --> ";
			cin >> _NAMEBOOK;

			cout << "ббед╡рэ AUTHOR -- > ";
			cin >> _AUTHOR;

			cout << "ббед╡рэ GENRE -- > ";
			cin >> _GENRE;

			cout << "ббед╡рэ LANGUAGE -- > ";
			cin >> _LANGUAGE;

			recordSlave << _ID << endl;
			recordSlave << _NAMEBOOK << endl;
			recordSlave << _AUTHOR << endl;
			recordSlave << _GENRE << endl;

			if (i < n - 1)
				recordSlave << _LANGUAGE << endl;
			else
				recordSlave << _LANGUAGE;

			cout << "_________________________" << endl;
		}

	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	recordSlave.close();
}
//----------------------------------------------

//гвхрсбюммъ дюмху дкъ о╡дкецкху гюохя╡б--------
void DataReadingSlave(string fileName)
{
	//гвхрсбюммъ дюмху ╡г тюикс

	ifstream readingSlave(fileName);
	ofstream recordSlave("BufferSlave.txt", ios::out);

	if (readingSlave)
	{
		if (recordSlave)
		{
			//рхлвюянб╡ гл╡мм╡
			int _ID;
			string _NAMEBOOK;
			string _AUTHOR;
			string _GENRE;
			string _LANGUAGE;
			int n;

			//гвхрс╙лн дюм╡ ╡г тюикс

			readingSlave >> n;
			recordSlave << n << endl;

			for (int i = 0; i < n; i++)
			{
				readingSlave >> _ID;

				readingSlave >> _NAMEBOOK;

				readingSlave >> _AUTHOR;

				readingSlave >> _GENRE;

				readingSlave >> _LANGUAGE;

				recordSlave << _ID << endl;
				recordSlave << _NAMEBOOK << endl;
				recordSlave << _AUTHOR << endl;
				recordSlave << _GENRE << endl;
				if (i < n - 1)
					recordSlave << _LANGUAGE << endl;
				else
					recordSlave << _LANGUAGE;
			}
			cout << "дюм╡ гвхрюм╡!" << endl;
		}
		else
			cout << "онлхкйю б╡дйпхрръ астепю!" << endl;
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	//гюйпхрръ тюикс
	readingSlave.close();
	recordSlave.close();
}
//-----------------------------------------------

//гаепефеммъ дюмху SLAVE-------------------------------
void SaveDataSlave(string fileName)
{
	//гаепефеммъ дюмху
	ifstream readingSlave("BufferSlave.txt");
	ofstream recordSlave(fileName, ios::out);

	if (readingSlave)
	{
		if (recordSlave)
		{
			//рхлвюянб╡ гл╡мм╡
			int _ID;
			string _NAMEBOOK;
			string _AUTHOR;
			string _GENRE;
			string _LANGUAGE;
			int n;

			readingSlave >> n;
			recordSlave << n << endl;

			for (int i = 0; i < n; i++)
			{
				readingSlave >> _ID;
				recordSlave << _ID << endl;

				readingSlave >> _NAMEBOOK;
				recordSlave << _NAMEBOOK << endl;

				readingSlave >> _AUTHOR;
				recordSlave << _AUTHOR << endl;

				readingSlave >> _GENRE;
				recordSlave << _GENRE << endl;

				readingSlave >> _LANGUAGE;
				if (i < n - 1)
					recordSlave << _LANGUAGE << endl;
				else
					recordSlave << _LANGUAGE;
			}
			cout << "дюм╡ гаепефеммн с тюик╡! --> " << fileName << endl;
		}
		else
			cout << "онлхкйю б╡дйпхрръ астепмнцн тюикю!" << endl;
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	recordSlave.close();
	readingSlave.close();

}
//-----------------------------------------------

//нвхыеммъ дюмху дкъ SLAVE тюикс----------------
bool DataCleaningSlave()
{
	//нвхыеммъ астепю

	bool clear = false;

	//б╡дйпхбю╙л тюик
	fstream _bufSlave("BufferSlave.txt", ios::out);

	if (!_bufSlave)
		cout << "онлхкйю б╡дйпхрръ астепмнцн тюикс" << endl;

	//нвхыс╙лн
	_bufSlave.clear();

	//оепеб╡пйю, ын тюик нвхыемн
	if (_bufSlave.peek() == EOF)
		clear = true;
	else
		clear = false;

	_bufSlave.close();

	return clear;
}
//----------------------------------------------

//бхбндхлн бя╡ дюм╡-----------------------------
void PrintAll()
{
	ifstream reading("Master.txt");
	ifstream read("Slave.txt");

	if (reading)
	{
		//рхлвюянб╡ гл╡мм╡
		int _ID;
		string _NAME;
		string _PASSWORD;
		string _EMAIL;
		int n;

		cout << "////////////////////////////////////////////////////////////////" << endl;
		cout << "////////////////////////////////////////////////////////////////" << endl;
		cout << "рюакхжъ нямнбмху гюохя╡б MASTER FILE:" << endl;
		reading >> n;
		cout << "й╡кэй╡ярэ дюмху MASTER FILE:" << n << endl;

		for (int i = 0; i < n; i++)
		{
			cout << "дюм╡ опн ID" << i + 1 << endl;

			reading >> _ID;
			cout << "ID --> " << _ID << endl;

			reading >> _NAME;
			cout << "NAME --> " << _NAME << endl;

			reading >> _PASSWORD;
			cout << "PASSWORD --> " << _PASSWORD << endl;

			reading >> _EMAIL;
			cout << "EMAIL --> " << _EMAIL << endl;

			cout << "_________________________________" << endl;
		}
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;
	//о╡дкецк╡ гюохях

	if (read)
	{
		//рхлвюянб╡ гл╡мм╡
		int _ID;
		string _NAMEBOOK;
		string _AUTHOR;
		string _GENRE;
		string _LANGUAGE;
		int n;

		cout << "////////////////////////////////////////////////////////////////" << endl;
		cout << "////////////////////////////////////////////////////////////////" << endl;
		cout << "рюакхжъ о╡дкецкху гюохя╡б SLAVE FILE:" << endl;
		read >> n;
		cout << "й╡кэй╡ярэ дюмху SLAVE FILE:" << n << endl;

		for (int i = 0; i < n; i++)
		{
			cout << "дюм╡ опн ID" << i + 1 << endl;

			read >> _ID;
			cout << "ID --> " << _ID << endl;

			read >> _NAMEBOOK;
			cout << "NAMEBOOK --> " << _NAMEBOOK << endl;

			read >> _AUTHOR;
			cout << "AUTHOR --> " << _AUTHOR << endl;

			read >> _GENRE;
			cout << "GENRE --> " << _GENRE << endl;

			read >> _LANGUAGE;
			cout << "LANGUAGE --> " << _LANGUAGE << endl;

			cout << "_________________________________" << endl;
		}
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	//гюйпхрръ тюикс
	reading.close();
	read.close();
}
//-----------------------------------------------


//бхбндхлн MASTER дюм╡ цпсонбюм╡-----------------------------
void PrintMasterSort()
{
	ifstream reading("MasterSort.txt");

	if (reading)
	{
		//рхлвюянб╡ гл╡мм╡
		string _ID;
		string _NAME;
		string _PASSWORD;
		string _EMAIL;

		int domen = 4;
		//пюус╙лн й╡кэй╡ярэ пъдй╡б цпсонбюмху дюмху
		int inLine = AmountOfDataMasterSort((char*)"MasterSort.txt");
		int p = inLine / domen;
		cout << "///////////////////////////////////////////////////////////" << endl;
		cout << "///////////////////////////////////////////////////////////" << endl;
		cout << "й╡кэй╡ярэ дюмху MASTER:" << p << endl;
		cout << "///////////////////////////////////////////////////////////" << endl;

		for (int i = 0; i < p; i++)
		{
			//cout << "дюм╡ опн ID ----" << _ID << endl;

			reading >> _ID;
			cout << "дюм╡ опн ID ----" << _ID << endl;
			cout << "ID --> " << _ID << endl;

			reading >> _NAME;
			cout << "NAME --> " << _NAME << endl;

			reading >> _PASSWORD;
			cout << "PASSWORD --> " << _PASSWORD << endl;

			reading >> _EMAIL;
			cout << "EMAIL --> " << _EMAIL << endl;

			cout << "_________________________________" << endl;
		}
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	//гюйпхрръ тюикс
	reading.close();
}
//-----------------------------------------------

//бхбндхлн SLAVE дюм╡ цпсонбюм╡-------------------
void PrintMasterSlave()
{
	ifstream reading("SlaveSort.txt");

	if (reading)
	{
		//рхлвюянб╡ гл╡мм╡
		int _ID;
		string _NAMEBOOK;
		string _AUTHOR;
		string _GENRE;
		string _LANGUAGE;

		int domen = 5;
		//пюус╙лн й╡кэй╡ярэ пъдй╡б цпсонбюмху дюмху
		int inLine = AmountOfDataSlaveSort((char*)"SlaveSort.txt");
		int p = inLine / domen;
		cout << "///////////////////////////////////////////////////////////" << endl;
		cout << "///////////////////////////////////////////////////////////" << endl;
		cout << "й╡кэй╡ярэ дюмху SLAVE:" << p << endl;
		cout << "///////////////////////////////////////////////////////////" << endl;

		for (int i = 0; i < p; i++)
		{
			//cout << "дюм╡ опн ID" << i + 1 << endl;

			reading >> _ID;
			cout << "дюм╡ опн ID ----" << _ID << endl;
			cout << "ID --> " << _ID << endl;

			reading >> _NAMEBOOK;
			cout << "NAMEBOOK --> " << _NAMEBOOK << endl;

			reading >> _AUTHOR;
			cout << "AUTHOR --> " << _AUTHOR << endl;

			reading >> _GENRE;
			cout << "GENRE --> " << _GENRE << endl;

			reading >> _LANGUAGE;
			cout << "LANGUAGE --> " << _LANGUAGE << endl;

			cout << "_________________________________" << endl;
		}
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	//гюйпхрръ тюикс
	reading.close();
}
//-----------------------------------------------

//й╡кэй╡ярэ цпсонбюмху дюмху MASTERSORT--------------------------------
int AmountOfDataMasterSort(char* filename)
{
	// 1. нАЗЪБХРЭ ЩЙГЕЛОКЪП F, ЙНРНПШИ ЯБЪГЮМ Я ТЮИКНЛ filename.
	// тЮИК НРЙПШБЮЕРЯЪ ДКЪ ВРЕМХЪ Б РЕЙЯРНБНЛ ТНПЛЮРЕ.
	ifstream F(filename, ios::in);
	// 2. оПНБЕПЙЮ, ЯСЫЕЯРБСЕР КХ ТЮИК
	if (!F)
	{
		return -1;
	}

	// 3. бШВХЯКХРЭ ЙНКХВЕЯРБН ЯРПНЙ Б ТЮИКЕ
	// 3.1. нАЗЪБХРЭ ДНОНКМХРЕКЭМШЕ ОЕПЕЛЕММШЕ
	int count = 0;
	char buffer[1000]; // АСТЕП ДКЪ ЯНУПЮМЕМХЪ НДМНИ ЯРПНЙХ

	// 3.2. жХЙК ВРЕМХЪ ЯРПНЙ.
	// йЮФДЮЪ ЯРПНЙЮ ТЮИКЮ ВХРЮЕРЯЪ ТСМЙЖХЕИ getline().
	// оПНБЕПЙЮ ЙНМЖЮ ТЮИКЮ НЯСЫЕЯРБКЪЕРЯЪ ТСМЙЖХЕИ eof().
	while (!F.eof())
	{
		// сБЕКХВХРЭ ЯВЕРВХЙ ЯРПНЙ
		count++;

		// яВХРЮРЭ НДМС ЯРПНЙС Б АСТЕП
		F.getline(buffer, 1000);
	}
	// 4. гЮЙПШРЭ ТЮИК F
	F.close();
	// 5. бЕПМСРЭ ПЕГСКЭРЮР
	return count;
}
//-----------------------------------------------

//й╡кэй╡ярэ цпсонбюмху дюмху MASTERSORT--------------------------------
int AmountOfDataSlaveSort(char* filename)
{
	// 1. нАЗЪБХРЭ ЩЙГЕЛОКЪП F, ЙНРНПШИ ЯБЪГЮМ Я ТЮИКНЛ filename.
	// тЮИК НРЙПШБЮЕРЯЪ ДКЪ ВРЕМХЪ Б РЕЙЯРНБНЛ ТНПЛЮРЕ.
	ifstream F(filename, ios::in);
	// 2. оПНБЕПЙЮ, ЯСЫЕЯРБСЕР КХ ТЮИК
	if (!F)
	{
		return -1;
	}

	// 3. бШВХЯКХРЭ ЙНКХВЕЯРБН ЯРПНЙ Б ТЮИКЕ
	// 3.1. нАЗЪБХРЭ ДНОНКМХРЕКЭМШЕ ОЕПЕЛЕММШЕ
	int count = 0;
	char buffer[1000]; // АСТЕП ДКЪ ЯНУПЮМЕМХЪ НДМНИ ЯРПНЙХ

	// 3.2. жХЙК ВРЕМХЪ ЯРПНЙ.
	// йЮФДЮЪ ЯРПНЙЮ ТЮИКЮ ВХРЮЕРЯЪ ТСМЙЖХЕИ getline().
	// оПНБЕПЙЮ ЙНМЖЮ ТЮИКЮ НЯСЫЕЯРБКЪЕРЯЪ ТСМЙЖХЕИ eof().
	while (!F.eof())
	{
		// сБЕКХВХРЭ ЯВЕРВХЙ ЯРПНЙ
		count++;

		// яВХРЮРЭ НДМС ЯРПНЙС Б АСТЕП
		F.getline(buffer, 1000);
	}
	// 4. гЮЙПШРЭ ТЮИК F
	F.close();
	// 5. бЕПМСРЭ ПЕГСКЭРЮР
	return count;
}
//-----------------------------------------------

//бхдюкеммъ дюмху--------------------------------
void DeleteDataSlave()
{
	//бхдюкеммъ дюмху

	//гюоюлърнбс╙лн дюм╡
	//оепегюохяс╙лн с бху╡дмхи астеп
	//нйп╡л бхдюкъ╙лнцн

	CopySlave();

	ifstream reading("BufferSlave_.txt");
	ofstream record("BufferSlave.txt", ios::out);

	if (reading)
	{
		if (record)
		{
			//рхлвюянб╡ гл╡мм╡
			int _ID;
			string _NAMEBOOK;
			string _AUTHOR;
			string _GENRE;
			string _LANGUAGE;
			int n, _n;

			//гвхрс╙лн г астепмнцн тюикю с мнбхи
			reading >> n;
			int b = n - 1;
			cout << "наеп╡рэ мнлеп екелемрю, ын гл╡мч╙лн (б╡д 1 дн " << n << "):";
			cin >> _n;
			_n--;

			system("cls");

			record << b << endl;

			if (_n >= 0 && _n < n)
			{
				for (int i = 0; i < n; i++)
				{
					if (i != _n)
					{
						reading >> _ID;
						record << _ID << endl;

						reading >> _NAMEBOOK;
						record << _NAMEBOOK << endl;

						reading >> _AUTHOR;
						record << _AUTHOR << endl;

						reading >> _GENRE;
						record << _GENRE << endl;

						reading >> _LANGUAGE;
						if (i < n - 1)
							record << _ID << endl;
						else
							record << _LANGUAGE;
					}
					else
					{
						reading >> _ID;
						reading >> _NAMEBOOK;
						reading >> _AUTHOR;
						reading >> _GENRE;
						reading >> _LANGUAGE;
					}
				}
				cout << "дюм╡ бхдюкем╡!" << endl;
			}
			else
				cout << "мнлеп бедемн ме б╡пмн!" << endl;
		}
		else
			cout << "онлхкйю б╡дйпхрръ тюикс" << endl;
	}
	else
		cout << "онлхкйю б╡дйпхрръ астепмнцн тюикс" << endl;

	record.close();
	reading.close();

	remove("BufferSlave_.txt");
}
//-----------------------------------------------

//бхбндхлн дюм╡----------------------------------
void PrintSlave()
{
	ifstream reading("BufferSlave.txt");

	if (reading)
	{
		//рхлвюянб╡ гл╡мм╡
		int _ID;
		string _NAMEBOOK;
		string _AUTHOR;
		string _GENRE;
		string _LANGUAGE;
		int n;

		reading >> n;
		cout << "й╡кэй╡ярэ дюмху:" << n << endl << endl;

		for (int i = 0; i < n; i++)
		{
			cout << "дюм╡ опн ID" << i + 1 << endl;

			reading >> _ID;
			cout << "ID --> " << _ID << endl;

			reading >> _NAMEBOOK;
			cout << "NAMEBOOK --> " << _NAMEBOOK << endl;

			reading >> _AUTHOR;
			cout << "AUTHOR --> " << _AUTHOR << endl;

			reading >> _GENRE;
			cout << "GENRE --> " << _GENRE << endl;

			reading >> _LANGUAGE;
			cout << "LANGUAGE --> " << _LANGUAGE << endl;

			cout << "_________________________________" << endl;
		}
	}
	else
		cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;

	//гюйпхрръ тюикс
	reading.close();
}
//-----------------------------------------------

//йно╡чбюммъ дюмху------------------------------
void CopySlave()
{
	//йно╡чбюммъ дн мнбцн тюикс
	ifstream reading("BufferSlave.txt");
	ofstream record("BufferSlave_.txt", ios::out);

	if (reading)
	{
		if (record)
		{
			//рхлвюянб╡ гл╡мм╡
			int _ID;
			string _NAMEBOOK;
			string _AUTHOR;
			string _GENRE;
			string _LANGUAGE;
			int n;

			//гвхрс╙лн г астепмнцн тюикс рю б мнбхи
			reading >> n;
			record << n << endl;

			for (int i = 0; i < n; i++)
			{
				reading >> _ID;
				record << _ID << endl;

				reading >> _NAMEBOOK;
				record << _NAMEBOOK << endl;

				reading >> _AUTHOR;
				record << _AUTHOR << endl;

				reading >> _GENRE;
				record << _GENRE << endl;

				reading >> _LANGUAGE;
				if (i < n - 1)
					record << _LANGUAGE << endl;
				else
					record << _LANGUAGE;
			}
		}
		else
			cout << "онлхкйю б╡дйпхрръ тюикс!" << endl;
	}
	else
		cout << "онлхкйю б╡дйпхрръ астепмнцн тюикс!" << endl;

	record.close();
	reading.close();
}
//-----------------------------------------------



